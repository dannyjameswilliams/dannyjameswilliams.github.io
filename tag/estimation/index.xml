<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Estimation | Danny James Williams</title>
    <link>https://dannyjameswilliams.co.uk/tag/estimation/</link>
      <atom:link href="https://dannyjameswilliams.co.uk/tag/estimation/index.xml" rel="self" type="application/rss+xml" />
    <description>Estimation</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-gb</language><lastBuildDate>Thu, 09 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dannyjameswilliams.co.uk/images/icon_hu6de9a8f7dd4e8a8bd7c2613cf2ad59bf_37670_512x512_fill_lanczos_center_3.png</url>
      <title>Estimation</title>
      <link>https://dannyjameswilliams.co.uk/tag/estimation/</link>
    </image>
    
    <item>
      <title>(Tutorial) Basic Usage of the Manifold TSM R Package</title>
      <link>https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/</guid>
      <description>
&lt;script src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;von-mises-fisher-distribution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;von-Mises Fisher distribution&lt;/h2&gt;
&lt;p&gt;We simulate &lt;span class=&#34;math inline&#34;&gt;\(n=1000\)&lt;/span&gt; samples from a von-Mises distribution with mean direction &lt;span class=&#34;math inline&#34;&gt;\((\pi/2, \pi)\)&lt;/span&gt; on the sphere, using the &lt;code&gt;rvmf&lt;/code&gt; function from the &lt;code&gt;Rfast&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Simulated VMF
n = 1000              
centre = c(pi/2, pi) 
centre_euclid = sphere_to_euclid(centre)   
set.seed(4)
z = rvmf(n, centre_euclid, k = 6)
x = euclid_to_sphere(z)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this can be estimated directly, using various methods such as MLE, but if we could only see a portion of this data, then truncated score matching can be used. Say there is a boundary set up such that all measurements below a constant line of &lt;span class=&#34;math inline&#34;&gt;\(\phi = \pi/2 + 0.2\)&lt;/span&gt; were missing. This can be constructed as follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dV = cbind(rep(pi/2+0.2, 200), seq(0, 2*pi, len=200))
outside_boundary = x[,1] &amp;gt; (pi/2+0.2)
truncated_x = x[outside_boundary,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean direction can be estimated by calling &lt;code&gt;sphere_sm&lt;/code&gt; with a specified boundary function, one of &lt;code&gt;&#34;Haversine&#34;&lt;/code&gt; or &lt;code&gt;&#34;Euclidean&#34;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est_hav = sphere_sm(truncated_x, dV, g = &amp;quot;Haversine&amp;quot;, family = vmf(k=6))
est_euc = sphere_sm(truncated_x, dV, g = &amp;quot;Euclidean&amp;quot;, family = vmf(k=6))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;family&lt;/code&gt; argument is &lt;code&gt;vmf(k=6)&lt;/code&gt;. This is a wrapper function that specifies which distribution to use. The argument &lt;code&gt;k=6&lt;/code&gt; corresponds to the concentration parameter being fixed a t 6, if this werenâ€™t supplied and &lt;code&gt;vmf()&lt;/code&gt; was used alone, the concentration parameter will be esitmated. By default the &lt;code&gt;sphere_sm&lt;/code&gt; function uses the von Mises Fisher distribution without specifying a value for &lt;code&gt;k&lt;/code&gt;. Now that the points are estimated, we can plot them using &lt;code&gt;ggplot&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_data = data.frame(colat = c(x[!as.logical(outside_boundary),1],
                                 x[as.logical(outside_boundary),1]),
                       lon = c(x[!as.logical(outside_boundary),2],
                               x[as.logical(outside_boundary),2]),
                       Data = c(rep(&amp;quot;Not-Observed&amp;quot;, sum(!as.logical(outside_boundary))),
                                rep(&amp;quot;Observed&amp;quot;, sum(outside_boundary))))
centre_data = data.frame(
  colat = c(est_hav$mu[1], est_euc$mu[1], centre[1]),
  lon = c(est_hav$mu[2], est_euc$mu[2], centre[2]),
  Centres = c(&amp;quot;Haversine&amp;quot;, &amp;quot;Projected Euclidean&amp;quot;, &amp;quot;Real Centre&amp;quot;)
)
 ggplot(plot_data) + geom_point(aes(x=lon, y=colat, col=Data), alpha=.7, size=2) +
  scale_color_brewer(type=&amp;quot;qual&amp;quot;, palette=3) + theme_minimal() +
  xlab(expression(theta)) + ylab(expression(phi)) +
   geom_point(data=centre_data, aes(lon, colat, fill=Centres), size=4, shape = &amp;quot;diamond filled&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
The point has been estimated reasonably well. Now lets try the same approach &lt;em&gt;without&lt;/em&gt; fixing the concentration parameter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est_hav = sphere_sm(truncated_x, dV, g = &amp;quot;Haversine&amp;quot;, family = vmf())
est_euc = sphere_sm(truncated_x, dV, g = &amp;quot;Euclidean&amp;quot;, family = vmf())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
Again, the centre has been found with good accuracy. We can inspect the output of &lt;code&gt;sphere_sm&lt;/code&gt; to see what value was estimated for &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est_hav
#&amp;gt; $mu
#&amp;gt;    colat      lon 
#&amp;gt; 1.539329 3.112377 
#&amp;gt; 
#&amp;gt; $k
#&amp;gt;        k 
#&amp;gt; 5.415736 
#&amp;gt; 
#&amp;gt; $family
#&amp;gt; [1] &amp;quot;von Mises Fisher&amp;quot;
#&amp;gt; 
#&amp;gt; $val
#&amp;gt; [1] -2.044959
est_euc
#&amp;gt; $mu
#&amp;gt;    colat      lon 
#&amp;gt; 1.584297 3.111693 
#&amp;gt; 
#&amp;gt; $k
#&amp;gt;        k 
#&amp;gt; 5.481328 
#&amp;gt; 
#&amp;gt; $family
#&amp;gt; [1] &amp;quot;von Mises Fisher&amp;quot;
#&amp;gt; 
#&amp;gt; $val
#&amp;gt; [1] -1.713839&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;a-different-boundary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A different Boundary&lt;/h3&gt;
&lt;p&gt;We can experiment with a different boundary, implementing the same approach to the same dataset but a different truncation region. Start by simulating different data from the same distribution and constructing the boundary as before:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(7)
z = rvmf(n, centre_euclid, k = 6)
x = euclid_to_sphere(z)
dV = cbind(c(rep(1.2, 200), seq(1.2, 3, len=200)), c(seq(0, 3.6, len=200), rep(3.6, len=200)))
outside_boundary = x[,2] &amp;lt; 3.6 &amp;amp; x[,1] &amp;gt; 1.2
truncated_x = x[as.logical(outside_boundary),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in this case, the boundary is anything that fits &lt;span class=&#34;math inline&#34;&gt;\(\phi &amp;gt; 1.2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\theta &amp;lt; 3.6\)&lt;/span&gt;, roughly a box around the top left portion of the data. We call &lt;code&gt;sphere_sm&lt;/code&gt; as before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est_hav = sphere_sm(truncated_x, dV, g = &amp;quot;Haversine&amp;quot;, family=vmf())
est_euc = sphere_sm(truncated_x, dV, g = &amp;quot;Euclidean&amp;quot;, family=vmf())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
The results are slightly less accurate than before, but still hold.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kent-distribution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Kent Distribution&lt;/h2&gt;
&lt;p&gt;We adopt a similar approach for the Kent distribution, simulating data, truncating it at an artificial boundary and experimenting with fitting the model to see how well the estimated mean direction &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; is. Firstly, we use a boundary similar to before, truncated at &lt;span class=&#34;math inline&#34;&gt;\(\phi = \pi/2+0.1\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z = rkent(n, k = 10, m = centre_euclid, b=3)
x = euclid_to_sphere(z)
dV = cbind(rep(pi/2+0.1, 500), seq(0, 2*pi, len=500))
outside_boundary = x[,1] &amp;gt; (pi/2 + 0.1)
truncated_x = x[outside_boundary,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the Kent distribution has five parameters, estimation can be difficult and slow in some cases. For the Kent distribution, we assume that the concentration parameter &lt;code&gt;k&lt;/code&gt; and ovalness parameter &lt;code&gt;b&lt;/code&gt; are known, and specified in advance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est_hav = sphere_sm(truncated_x, dV, g=&amp;quot;Haversine&amp;quot;, family=kent(k=10, b=3))
est_euc = sphere_sm(truncated_x, dV, g=&amp;quot;Euclidean&amp;quot;, family=kent(k=10, b=3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And another boundary, similar to before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(12)
z = rkent(n, m=centre_euclid, k = 10, b=3)
dV = cbind(c(rep(1.2, 200), seq(1.2, 3, len=200)), c(seq(0, 3.6, len=200), rep(3.6, len=200)))
x = euclid_to_sphere(z)
outside_boundary = x[,2] &amp;lt; 3.6 &amp;amp; x[,1] &amp;gt; 1.2
truncated_x = x[as.logical(outside_boundary),]

est_hav = sphere_sm(truncated_x, dV, g = &amp;quot;Haversine&amp;quot;, family=kent(k=10, b=3))
est_euc = sphere_sm(truncated_x, dV, g = &amp;quot;Euclidean&amp;quot;, family=kent(k=10, b=3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dannyjameswilliams.co.uk/tutorials/tutorialmanifoldtsm1/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
