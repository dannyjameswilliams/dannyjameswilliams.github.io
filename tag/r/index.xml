<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Danny James Williams</title>
    <link>http://dannyjameswilliams.co.uk/tag/r/</link>
      <atom:link href="http://dannyjameswilliams.co.uk/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-gb</language><lastBuildDate>Sun, 28 Jun 2020 15:39:00 +0000</lastBuildDate>
    <image>
      <url>http://dannyjameswilliams.co.uk/images/icon_hu6de9a8f7dd4e8a8bd7c2613cf2ad59bf_37670_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>http://dannyjameswilliams.co.uk/tag/r/</link>
    </image>
    
    <item>
      <title>Hot Takes for R</title>
      <link>http://dannyjameswilliams.co.uk/post/hottakes/</link>
      <pubDate>Sun, 28 Jun 2020 15:39:00 +0000</pubDate>
      <guid>http://dannyjameswilliams.co.uk/post/hottakes/</guid>
      <description>


&lt;p&gt;The arrow assigment operator &lt;code&gt;&amp;lt;-&lt;/code&gt; is useless. Before I’m crucified by the R community, hear me out and read this post.&lt;/p&gt;
&lt;p&gt;Every time I read code written by an academic, lecturer or someone who uses R frequently, I come across the arrow symbol &lt;code&gt;&amp;lt;-&lt;/code&gt; used for assignment of variables. Never in my career have I seen someone systematically use the equals symbol &lt;code&gt;=&lt;/code&gt; across their code.&lt;/p&gt;
&lt;div id=&#34;benefits-of-the-arrow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Benefits of the arrow&lt;/h3&gt;
&lt;p&gt;A frequent association with &lt;code&gt;&amp;lt;-&lt;/code&gt; is in how assignment works in R. The variable on the right hand side of the operator is assigned to the one on the left. Hence the arrow makes a lot of sense. We can also do it the other way around, for instance:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;3 -&amp;gt; x
y &amp;lt;- 5
cat(&amp;quot;x is&amp;quot;, x, &amp;quot;and y is&amp;quot;, y, &amp;quot;\n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x is 3 and y is 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the arrow has a benefit when teaching programming, so if you’re a beginner it is obvious which way around variables are assigned. If you’re not a beginner, it might reinforce this knowledge so that you don’t make mistakes.&lt;/p&gt;
&lt;p&gt;You can also use the arrow inside of functions to assign variables, for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time(x &amp;lt;- solve(matrix(rnorm(100^2), 100, 100)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.009   0.007   0.004&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can view &lt;code&gt;x&lt;/code&gt; separately, even though it was assigned inside the &lt;code&gt;system.time&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x[1:5, 1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             [,1]         [,2]        [,3]        [,4]        [,5]
## [1,] -0.06462205 -0.020931424  0.11817438 -0.18430566 -0.03781733
## [2,]  0.03279143 -0.007782603 -0.12716072  0.03636665  0.10505115
## [3,]  0.02362454 -0.001848696 -0.05952053 -0.04676793 -0.01750361
## [4,] -0.05040604  0.047707725  0.02687982 -0.01738263  0.01374564
## [5,] -0.01643280 -0.040117354  0.12479274 -0.00396290 -0.05332341&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is perhaps its most useful application, which you cannot do with &lt;code&gt;=&lt;/code&gt;. The &lt;code&gt;=&lt;/code&gt; sign inside of a function argument is strictly used for matching the function argument with the variable you’re passing through.&lt;/p&gt;
&lt;p&gt;The arrow also has historical significance, since R’s predecessor, S, used &lt;code&gt;&amp;lt;-&lt;/code&gt; exclusively. This &lt;a href=&#34;https://www.r-bloggers.com/why-do-we-use-arrow-as-an-assignment-operator/&#34;&gt;R-bloggers post&lt;/a&gt; explains that S was based on an older language called APL, which was designed on a keyboard that had an arrow key exactly like &lt;code&gt;&amp;lt;-&lt;/code&gt;. But our keyboards now only have a key for &lt;code&gt;=&lt;/code&gt;, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-you-should-accept-the-equals-sign&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why you should accept the equals sign&lt;/h3&gt;
&lt;p&gt;But I’m here today to tell you to not use &lt;code&gt;&amp;lt;-&lt;/code&gt; and to use &lt;code&gt;=&lt;/code&gt; instead. Start by asking yourself why you use the arrow? Maybe you have historical reasons and used R before 2001, or more likely, you’re following convention for coding in R that even &lt;a href=&#34;https://google.github.io/styleguide/Rguide.html&#34;&gt;styling guides&lt;/a&gt; &lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34;&gt;recommend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Firstly, no other programming language uses the arrows, at least, none of the most frequently used ones such as Python, MATLAB, C++, Julia, Javascript, etc. So if you’re like me and use R alongside other programming languages, why would you bother using &lt;code&gt;&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;? Wouldn’t you like consistency across the languages you write in, at least so that your muscle memory doesn’t have to change depending on whether you’re fitting a Neural network in Python, or a GAM in R?&lt;/p&gt;
&lt;p&gt;Okay fair enough, maybe you don’t mind switching coding styles depending on what language you’re writing in, after all, you are going to be changing a lot more than just the assignment operator. So what other benefits does &lt;code&gt;=&lt;/code&gt; have?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a button for it on the keyboard.&lt;/li&gt;
&lt;li&gt;Consistency between function arguments and assignment.&lt;/li&gt;
&lt;li&gt;Increased readability and neatness since it has fewer character (admittedly, this is subjective).&lt;/li&gt;
&lt;li&gt;Similarity with equality operator (&lt;code&gt;==&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;No confusion between for example &lt;code&gt;x&amp;lt;-2&lt;/code&gt; (&lt;span class=&#34;math inline&#34;&gt;\(x=2\)&lt;/span&gt;) and &lt;code&gt;x &amp;lt; -2&lt;/code&gt; (&lt;span class=&#34;math inline&#34;&gt;\(x &amp;lt; -2\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;Consistency with &lt;em&gt;mathematics itself&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general, I prefer to use the equals assigment operator over the arrow, because I like to code in more than just one language.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-neat-full-stop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The neat full stop&lt;/h3&gt;
&lt;p&gt;While I’m on the subject of the arrow, using a full stop in a variable name brings a lot of confusion. This one is a lot less controversial than disregarding the arrow in my opinion. We can name a variable in R as&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;some.variable = 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks neat! But in other languages, this would throw an error. Why is that? Languages like Python use &lt;code&gt;.&lt;/code&gt; as a class operator, and you use it to access elements of a class exclusively, so you cannot use it in variable names. But R doesn’t have this problem, right?&lt;/p&gt;
&lt;p&gt;When defining an S3 class in R, you can overwrite some default functions (such as &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;plot&lt;/code&gt;) with a new function that handles these default operations in a different way for your specific S3 class. To do this for an S3 class called &lt;code&gt;mys3class&lt;/code&gt;, you would write a new functions as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print.mys3class = function(x, ...){
  ...
}
plot.mys3class = function(x, ...){
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look familiar? So full stops &lt;em&gt;do&lt;/em&gt; have a purpose in R apart from assigning neat variable names. For me, I don’t like using full stops for the main reason I don’t like using the &lt;code&gt;&amp;lt;-&lt;/code&gt; operator: &lt;strong&gt;consistency&lt;/strong&gt;. If I’m using &lt;code&gt;&amp;lt;-&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt;, it will be for a specific purpose where I cant use &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; (however, these are rules that I’ve broken myself, and you can probably find instances of it in my portfolios).&lt;/p&gt;
&lt;p&gt;So whilst neither the arrow (&lt;code&gt;&amp;lt;-&lt;/code&gt;) for assignment nor the full stop (&lt;code&gt;.&lt;/code&gt;) for variable naming are completely useless, better alternatives &lt;em&gt;do&lt;/em&gt; exist. However, if you value your code looking neat above all else, and aren’t bothered by cross platform consistency; then you can use R’s exclusive &lt;code&gt;&amp;lt;-&lt;/code&gt;, or its inconsistent &lt;code&gt;.&lt;/code&gt; without issue.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
